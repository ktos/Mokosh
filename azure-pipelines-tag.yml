pool:
  vmImage: 'Ubuntu 16.04'

trigger:
- master

pr:
- master

steps:
- task: GitVersion@5
  inputs:
    runtime: 'core'

- bash: |
   #!/usr/bin/env bash
   
   ESP8266="esp8266:esp8266:d1:xtal=80,vt=flash,exception=legacy,ssl=all,eesz=4M2M,ip=lm2f,dbg=Disabled,lvl=None____,wipe=none,baud=921600"
   
   function status() {
     echo -n $1
     if [ $2 -ne 0 ]; then echo -e """$RED""\xe2\x9c\x96"; else echo -e """$GREEN""\xe2\x9c\x93"; fi
   }
   
   wget --quiet https://github.com/arduino/arduino-cli/releases/download/0.10.0/arduino-cli_0.10.0_Linux_64bit.tar.gz -O $HOME/arduino-cli_0.10.0_Linux_64bit.tar.gz
   status "Downloading Arduino: " $?
   mkdir $HOME/arcli
   tar xzf $HOME/arduino-cli_0.10.0_Linux_64bit.tar.gz -C $HOME/arcli/
   status "Extracting Arduino: " $?
   export PATH="$HOME/arcli:$PATH"
   export ARDUINO=$HOME/arduino_ide/
   
   arduino-cli --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json core update-index
   arduino-cli --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json core install esp8266:esp8266
   status "Install Boards: " $?
   
   arduino-cli lib update-index
   
   arduino-cli lib install FastLED@3.3.2
   status "Install FastLED: " $?
   
   arduino-cli lib install PubSubClient@2.7.0
   status "Install PubSubClient: " $?
   
   arduino-cli lib install ArduinoJson@5.13.4
   status "Install ArduinoJson: " $?
  displayName: 'Install Dependencies'

- bash: |
   mkdir $HOME/Arduino/libraries/Mokosh
   cp -R $(Build.SourcesDirectory)/* $HOME/Arduino/libraries/Mokosh
   cp -R $(Build.SourcesDirectory)/* $(Build.StagingDirectory)
  displayName: 'Prepare Build'

- bash: |
   EXAMPLES=( 'DebugBasic' 'ErrorBasic' 'FirstRunBasic' 'WifiMqtt')
   ESP8266="esp8266:esp8266:d1:xtal=80,vt=flash,exception=legacy,ssl=all,eesz=4M2M,ip=lm2f,dbg=Disabled,lvl=None____,wipe=none,baud=921600"
   
   for i in ${EXAMPLES[*]}; do
     $HOME/arcli/arduino-cli compile -b $ESP8266 --warnings all $HOME/Arduino/libraries/Mokosh/examples/$i/$i.ino
     if [ $? -ne 0 ]; then echo "FAILED"; exit 12; fi
   done
  displayName: 'Build Examples'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(Build.StagingDirectory)'
